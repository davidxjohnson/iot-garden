#!/usr/bin/env node
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
require("source-map-support/register");
const cdk = require("aws-cdk-lib");
const ajv_1 = require("ajv");
var fs = require('fs');
const commander_1 = require("commander");
const app_stack_1 = require("../lib/app-stack");
const flags = new commander_1.Command();
flags
    .option('-c --config <string>', 'The configuration file to use.', './config/config.json')
    .option('-s --schema <string>', 'The config schema check file to use.', './config/config-schema.json')
    .showHelpAfterError()
    .parse();
const configFile = flags.opts()['config'];
const schemaFile = flags.opts()['schema'];
// Load the configuration file and config schema file
const config = JSON.parse(fs.readFileSync(configFile, 'utf-8'));
const configSchema = JSON.parse(fs.readFileSync(schemaFile, 'utf-8'));
// Create a new instance of the Ajv validator
// Validate the configuration file against the JSON schema
const ajv = new ajv_1.default();
const validate = ajv.compile(configSchema);
const isValid = validate(config);
if (!isValid) {
    console.error('Invalid configuration file:', configFile, validate.errors);
    process.exit(1);
}
// create the stack for a single customer in mind
const app = new cdk.App();
const stackName = config['stackName'] + '-' + config['customerId'];
new app_stack_1.IotGardenStack(app, stackName, config, { //props:
/* If you don't specify 'env', this stack will be environment-agnostic.
 * Account/Region-dependent features and context lookups will not work,
 * but a single synthesized template can be deployed anywhere. */
/* Uncomment the next line to specialize this stack for the AWS Account
 * and Region that are implied by the current CLI configuration. */
// env: { account: process.env.CDK_DEFAULT_ACCOUNT, region: process.env.CDK_DEFAULT_REGION },
/* Uncomment the next line if you know exactly what Account and Region you
 * want to deploy the stack to. */
// env: { account: '123456789012', region: 'us-east-1' },
/* For more information, see https://docs.aws.amazon.com/cdk/latest/guide/environments.html */
});
// console.info(app.synth());
//# sourceMappingURL=data:application/json;base64,eyJ2ZXJzaW9uIjozLCJmaWxlIjoiYXBwLmpzIiwic291cmNlUm9vdCI6IiIsInNvdXJjZXMiOlsiYXBwLnRzIl0sIm5hbWVzIjpbXSwibWFwcGluZ3MiOiI7OztBQUNBLHVDQUFxQztBQUNyQyxtQ0FBbUM7QUFDbkMsNkJBQXNCO0FBQ3RCLElBQUksRUFBRSxHQUFHLE9BQU8sQ0FBQyxJQUFJLENBQUMsQ0FBQztBQUN2Qix5Q0FBb0M7QUFDcEMsZ0RBQW1FO0FBRW5FLE1BQU0sS0FBSyxHQUFZLElBQUksbUJBQU8sRUFBRSxDQUFDO0FBQ3JDLEtBQUs7S0FDRixNQUFNLENBQUMsc0JBQXNCLEVBQUUsZ0NBQWdDLEVBQUUsc0JBQXNCLENBQUM7S0FDeEYsTUFBTSxDQUFDLHNCQUFzQixFQUFFLHNDQUFzQyxFQUFFLDZCQUE2QixDQUFDO0tBQ3JHLGtCQUFrQixFQUFFO0tBQ3BCLEtBQUssRUFBRSxDQUFDO0FBQ1gsTUFBTSxVQUFVLEdBQVcsS0FBSyxDQUFDLElBQUksRUFBRSxDQUFDLFFBQVEsQ0FBQyxDQUFDO0FBQ2xELE1BQU0sVUFBVSxHQUFXLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxRQUFRLENBQUMsQ0FBQztBQUVsRCxxREFBcUQ7QUFDckQsTUFBTSxNQUFNLEdBQW9CLElBQUksQ0FBQyxLQUFLLENBQUMsRUFBRSxDQUFDLFlBQVksQ0FBQyxVQUFVLEVBQUUsT0FBTyxDQUFDLENBQUMsQ0FBQztBQUNqRixNQUFNLFlBQVksR0FBRyxJQUFJLENBQUMsS0FBSyxDQUFDLEVBQUUsQ0FBQyxZQUFZLENBQUMsVUFBVSxFQUFFLE9BQU8sQ0FBQyxDQUFDLENBQUM7QUFFdEUsNkNBQTZDO0FBQzdDLDBEQUEwRDtBQUMxRCxNQUFNLEdBQUcsR0FBRyxJQUFJLGFBQUcsRUFBRSxDQUFDO0FBQ3RCLE1BQU0sUUFBUSxHQUFHLEdBQUcsQ0FBQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDM0MsTUFBTSxPQUFPLEdBQUcsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQ2pDLElBQUksQ0FBQyxPQUFPLEVBQUU7SUFDWixPQUFPLENBQUMsS0FBSyxDQUFDLDZCQUE2QixFQUFFLFVBQVUsRUFBRSxRQUFRLENBQUMsTUFBTSxDQUFDLENBQUM7SUFDMUUsT0FBTyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztDQUNqQjtBQUVELGlEQUFpRDtBQUNqRCxNQUFNLEdBQUcsR0FBRyxJQUFJLEdBQUcsQ0FBQyxHQUFHLEVBQUUsQ0FBQztBQUMxQixNQUFNLFNBQVMsR0FBRyxNQUFNLENBQUMsV0FBVyxDQUFDLEdBQUcsR0FBRyxHQUFHLE1BQU0sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUNuRSxJQUFJLDBCQUFjLENBQUMsR0FBRyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsRUFBRSxRQUFRO0FBRW5EOztpRUFFaUU7QUFFakU7bUVBQ21FO0FBQ25FLDZGQUE2RjtBQUU3RjtrQ0FDa0M7QUFDbEMseURBQXlEO0FBRXpELDhGQUE4RjtDQUMvRixDQUFDLENBQUM7QUFFSCw2QkFBNkIiLCJzb3VyY2VzQ29udGVudCI6WyIjIS91c3IvYmluL2VudiBub2RlXG5pbXBvcnQgJ3NvdXJjZS1tYXAtc3VwcG9ydC9yZWdpc3Rlcic7XG5pbXBvcnQgKiBhcyBjZGsgZnJvbSAnYXdzLWNkay1saWInO1xuaW1wb3J0IEFqdiBmcm9tICdhanYnO1xudmFyIGZzID0gcmVxdWlyZSgnZnMnKTtcbmltcG9ydCB7IENvbW1hbmQgfSBmcm9tICdjb21tYW5kZXInO1xuaW1wb3J0IHsgSW90R2FyZGVuQ29uZmlnLCBJb3RHYXJkZW5TdGFjayB9IGZyb20gJy4uL2xpYi9hcHAtc3RhY2snO1xuXG5jb25zdCBmbGFnczogQ29tbWFuZCA9IG5ldyBDb21tYW5kKCk7XG5mbGFnc1xuICAub3B0aW9uKCctYyAtLWNvbmZpZyA8c3RyaW5nPicsICdUaGUgY29uZmlndXJhdGlvbiBmaWxlIHRvIHVzZS4nLCAnLi9jb25maWcvY29uZmlnLmpzb24nKVxuICAub3B0aW9uKCctcyAtLXNjaGVtYSA8c3RyaW5nPicsICdUaGUgY29uZmlnIHNjaGVtYSBjaGVjayBmaWxlIHRvIHVzZS4nLCAnLi9jb25maWcvY29uZmlnLXNjaGVtYS5qc29uJylcbiAgLnNob3dIZWxwQWZ0ZXJFcnJvcigpXG4gIC5wYXJzZSgpO1xuY29uc3QgY29uZmlnRmlsZTogc3RyaW5nID0gZmxhZ3Mub3B0cygpWydjb25maWcnXTtcbmNvbnN0IHNjaGVtYUZpbGU6IHN0cmluZyA9IGZsYWdzLm9wdHMoKVsnc2NoZW1hJ107XG5cbi8vIExvYWQgdGhlIGNvbmZpZ3VyYXRpb24gZmlsZSBhbmQgY29uZmlnIHNjaGVtYSBmaWxlXG5jb25zdCBjb25maWc6IElvdEdhcmRlbkNvbmZpZyA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKGNvbmZpZ0ZpbGUsICd1dGYtOCcpKTtcbmNvbnN0IGNvbmZpZ1NjaGVtYSA9IEpTT04ucGFyc2UoZnMucmVhZEZpbGVTeW5jKHNjaGVtYUZpbGUsICd1dGYtOCcpKTtcblxuLy8gQ3JlYXRlIGEgbmV3IGluc3RhbmNlIG9mIHRoZSBBanYgdmFsaWRhdG9yXG4vLyBWYWxpZGF0ZSB0aGUgY29uZmlndXJhdGlvbiBmaWxlIGFnYWluc3QgdGhlIEpTT04gc2NoZW1hXG5jb25zdCBhanYgPSBuZXcgQWp2KCk7XG5jb25zdCB2YWxpZGF0ZSA9IGFqdi5jb21waWxlKGNvbmZpZ1NjaGVtYSk7XG5jb25zdCBpc1ZhbGlkID0gdmFsaWRhdGUoY29uZmlnKTtcbmlmICghaXNWYWxpZCkge1xuICBjb25zb2xlLmVycm9yKCdJbnZhbGlkIGNvbmZpZ3VyYXRpb24gZmlsZTonLCBjb25maWdGaWxlLCB2YWxpZGF0ZS5lcnJvcnMpO1xuICBwcm9jZXNzLmV4aXQoMSk7XG59XG5cbi8vIGNyZWF0ZSB0aGUgc3RhY2sgZm9yIGEgc2luZ2xlIGN1c3RvbWVyIGluIG1pbmRcbmNvbnN0IGFwcCA9IG5ldyBjZGsuQXBwKCk7XG5jb25zdCBzdGFja05hbWUgPSBjb25maWdbJ3N0YWNrTmFtZSddICsgJy0nICsgY29uZmlnWydjdXN0b21lcklkJ107XG5uZXcgSW90R2FyZGVuU3RhY2soYXBwLCBzdGFja05hbWUsIGNvbmZpZywgeyAvL3Byb3BzOlxuXG4gIC8qIElmIHlvdSBkb24ndCBzcGVjaWZ5ICdlbnYnLCB0aGlzIHN0YWNrIHdpbGwgYmUgZW52aXJvbm1lbnQtYWdub3N0aWMuXG4gICAqIEFjY291bnQvUmVnaW9uLWRlcGVuZGVudCBmZWF0dXJlcyBhbmQgY29udGV4dCBsb29rdXBzIHdpbGwgbm90IHdvcmssXG4gICAqIGJ1dCBhIHNpbmdsZSBzeW50aGVzaXplZCB0ZW1wbGF0ZSBjYW4gYmUgZGVwbG95ZWQgYW55d2hlcmUuICovXG5cbiAgLyogVW5jb21tZW50IHRoZSBuZXh0IGxpbmUgdG8gc3BlY2lhbGl6ZSB0aGlzIHN0YWNrIGZvciB0aGUgQVdTIEFjY291bnRcbiAgICogYW5kIFJlZ2lvbiB0aGF0IGFyZSBpbXBsaWVkIGJ5IHRoZSBjdXJyZW50IENMSSBjb25maWd1cmF0aW9uLiAqL1xuICAvLyBlbnY6IHsgYWNjb3VudDogcHJvY2Vzcy5lbnYuQ0RLX0RFRkFVTFRfQUNDT1VOVCwgcmVnaW9uOiBwcm9jZXNzLmVudi5DREtfREVGQVVMVF9SRUdJT04gfSxcblxuICAvKiBVbmNvbW1lbnQgdGhlIG5leHQgbGluZSBpZiB5b3Uga25vdyBleGFjdGx5IHdoYXQgQWNjb3VudCBhbmQgUmVnaW9uIHlvdVxuICAgKiB3YW50IHRvIGRlcGxveSB0aGUgc3RhY2sgdG8uICovXG4gIC8vIGVudjogeyBhY2NvdW50OiAnMTIzNDU2Nzg5MDEyJywgcmVnaW9uOiAndXMtZWFzdC0xJyB9LFxuXG4gIC8qIEZvciBtb3JlIGluZm9ybWF0aW9uLCBzZWUgaHR0cHM6Ly9kb2NzLmF3cy5hbWF6b24uY29tL2Nkay9sYXRlc3QvZ3VpZGUvZW52aXJvbm1lbnRzLmh0bWwgKi9cbn0pO1xuXG4vLyBjb25zb2xlLmluZm8oYXBwLnN5bnRoKCkpO1xuIl19